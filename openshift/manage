#!/bin/bash
export MSYS_NO_PATHCONV=1
set -e
SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage () {
  cat <<-EOF

  Allows you to manage certain aspects of TheOrgBook environment.

  Usage: 
    $0 [options] [commands]

  Example:
    $0 -P -e test resetDatabase
    - This will reset the database in TheOrgBook's TEST environment.

  Options:
  ========
    -h prints the usage for the script
    -e <Environment> the environment (dev/test/prod) into which you are deploying (default: ${DEPLOYMENT_ENV_NAME})
    -l apply local settings and parameters
    -p <profile> load a specific settings profile; setting.<profile>.sh
    -P Use the default settings profile; settings.sh.  Use this flag to ignore all but the default 
       settings profile when there is more than one settings profile defined for a project.
    -x run the script in debug mode to see what's happening

  Commands:
  ========
    resetDatabase
      - Drop and recreate the database.
      - Rebuild search indexes.

    hardReset
      - Delete the persistent indy wallet information.
      - Drop and recreate the database.
      - Rebuild search indexes.
      - Register the environment's DID with the ledger.

    registerDids
      - Register/re-register the services's DIDs with the ledger.

    rebuildSearchIndex
      - Rebuild the search index for a given environment.


EOF
exit 1
}

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------
while getopts p:Pe:lxh FLAG; do
  case $FLAG in
    p ) export PROFILE=$OPTARG ;;
    P ) export IGNORE_PROFILES=1 ;;    
    e ) export DEPLOYMENT_ENV_NAME=$OPTARG ;;
    l ) export APPLY_LOCAL_SETTINGS=1 ;;
    x ) export DEBUG=1 ;;
    h ) usage ;;
    \? ) #unrecognized option - show help
      echo -e \\n"Invalid script option: -${OPTARG}"\\n
      usage
      ;;
  esac
done
shift $((OPTIND-1))

if [ ! -z "${DEBUG}" ]; then
  set -x
fi

# Check for required options ...
if [ -z "${DEPLOYMENT_ENV_NAME}" ]; then
  _red='\033[0;31m'
  _nc='\033[0m' # No Color
  echo -e "${_red}You MUST specify an environment name using the '-e' flag.${_nc}"
  echo -e "${_red}Assuming a default would have unwanted consequences.${_nc}"
  usage
fi

# Load the project settings and functions ...
_includeFile="ocFunctions.inc"
_settingsFile="settings.sh"
if [ ! -z $(type -p ${_includeFile}) ]; then
  _includeFilePath=$(type -p ${_includeFile})
  export OCTOOLSBIN=$(dirname ${_includeFilePath})

  if [ -f ${OCTOOLSBIN}/${_settingsFile} ]; then
    . ${OCTOOLSBIN}/${_settingsFile}
  fi

  if [ -f ${OCTOOLSBIN}/${_includeFile} ]; then
    . ${OCTOOLSBIN}/${_includeFile}
  fi
else
  _red='\033[0;31m'
  _yellow='\033[1;33m'
  _nc='\033[0m' # No Color
  echo -e \\n"${_red}${_includeFile} could not be found on the path.${_nc}"
  echo -e "${_yellow}Please ensure the openshift-developer-tools are installed on and registered on your path.${_nc}"
  echo -e "${_yellow}https://github.com/BCDevOps/openshift-developer-tools${_nc}"
fi

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
resetDatabase() {
  _apiPodName=${1}
  _dbPodName=${2}
  if [ -z "${_apiPodName}" ] || [ -z "${_dbPodName}" ]; then
    echo -e \\n"resetDatabase; Missing parameter!"\\n
    exit 1
  fi

  switchProject
  exitOnError

  dropAndRecreateDatabaseWithMigrations ${_apiPodName} ${_dbPodName}
  rebuildSearchIndex ${_apiPodName}

  echoWarning "\nThe project's database has been reset."
  echoWarning "You can now use the Permitify manage script to recycle the Permitify pods."  
}

hardReset() {
  _apiPodName=${1}
  _dbPodName=${2}
  _walletApiPodName=${3}
  _walletDbPodName=${4}
  if [ -z "${_apiPodName}" ] || [ -z "${_dbPodName}" ] || [ -z "${_walletApiPodName}" ] || [ -z "${_walletDbPodName}" ]; then
    echo -e \\n"resetDatabase; Missing parameter!"\\n
    exit 1
  fi

  printAndWait "Use the Permitify manage script to reset the Permitify pods.\nWait for all of the pods to completely shut down before continuing."

  switchProject
  exitOnError

  dropAndRecreateDatabaseWithMigrations ${_walletApiPodName} ${_walletDbPodName}
  dropAndRecreateDatabaseWithMigrations ${_apiPodName} ${_dbPodName}
  rebuildSearchIndex ${_apiPodName}

  printAndWait "If you are resetting the ledger, wait for the ledger to completely start up before continuing."

  registerDids $(getDidNames)

  echoWarning "\nThe project's database and indy wallets have been reset."  
  echoWarning "You can now use the Permitify manage script to scale the Permitify pods up."  
}

rebuildSearchIndex() {
  _apiPodName=${1}
  if [ -z "${_apiPodName}" ]; then
    echo -e \\n"rebuildSearchIndex; Missing parameter!"\\n
    exit 1
  fi
  echoWarning "\nRebuilding the search index ..."
  echoWarning "The command may start interactively in the pod.  Please answer 'y' to the question if you are prompted."
  runInContainerInteractively ${_apiPodName} './rebuildSearchIndex.sh'
  exitOnError
}

getDidNames() {
  _didNames="
    the_org_book
    the_org_book_on"
  
  echo ${_didNames}
}

getLedgerAddress() {
  case "${DEPLOYMENT_ENV_NAME}" in
    dev)
      _ledgerAddress="159.89.115.24";;
    test)
      _ledgerAddress="159.89.125.134";;
    prod)
      _ledgerAddress="159.89.125.134";;
    *)
      return 1;;
  esac

  echo ${_ledgerAddress}
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
_cmd=$(toLower ${1})
shift

case "${_cmd}" in
  resetdatabase)
    # Allow all of the other parameters to be overridden ...
    apiPodName=${1:-django}
    dbPodName=${2:-postgresql}
    resetDatabase "${apiPodName}" "${dbPodName}"
    ;;
  hardreset)
    # Allow all of the other parameters to be overridden ...
    apiPodName=${1:-django}
    dbPodName=${2:-postgresql}
    walletApiPodName=${3:-wallet}
    walletDbPodName=${4:-wallet-db}
    hardReset "${apiPodName}" "${dbPodName}" "${walletApiPodName}" "${walletDbPodName}"
    ;;
  rebuildsearchindex)
    apiPodName=${1:-django}
    switchProject
    exitOnError
    rebuildSearchIndex "${apiPodName}"
    ;;
  registerdids)
    registerDids $(getDidNames)
    ;;
  *)
    echoWarning "Unrecognized command; ${_cmd}"
    usage
    ;;
esac

popd >/dev/null